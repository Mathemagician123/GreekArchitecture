from manim import *

class intro(Scene):
  def construct(self):
    text = Text("Geometry in Ancient Greece")
    image = ImageMobject("pic_parthenon")
    self.play(FadeIn(image))
    self.play(Write(text.next_to(image, UP)))
    self.wait(23)

class euclid(Scene):
  def construct(self):
    image = ImageMobject("euclid_actual")
    self.play(Write(Text("Euclid of Alexandria - Father of geometry").next_to(image, UP)))
    self.play(FadeIn(image))
    self.wait(2.5)
    self.play(FadeOut(image))
    self.clear()
    image2 = ImageMobject("pic_euclid").scale(3)
    self.play(Write(Text("Euclid's Elements").next_to(image2, UP)))
    self.play(FadeIn(image2))
    self.wait(8.25)
    self.play(FadeOut(image2))
    self.clear()
    dot = Dot([0,0,0])
    self.add(dot)
    self.play(Write(Text("Point").next_to(dot, 5*UP)))
    self.wait(2)
    self.clear()
    dot1 = Dot([-1,0,0])
    dot2 = Dot([1,0,0])
    line1 = Line([-1,0,0], [1,0,0])
    self.add(dot1, dot2, line1)
    self.play(Write(Text("Line Segment").next_to(dot, 5*UP)))
    self.wait(1)
    self.clear()
    line1 = Line( LEFT + (1/3) * UP, RIGHT + (1/3) * DOWN )
    line2 = Line( DOWN + (1/3) * RIGHT, UP + (1/3) * LEFT )
    angle = Angle(line1, line2)
    self.add(line1, line2, angle)
    self.play(Write(Text("Angle").next_to(angle, 5*DOWN)))
    self.wait(1)
    self.clear()
    triangle = Triangle()
    triangle.set_fill(BLUE, opacity = 0.5)
    self.play(Create(triangle))
    self.play(Write(Text("Triangle").next_to(triangle, 5*UP)))
    self.wait(7.5)
    self.clear()
    pos1 = Text("Line segments are straight.").scale(0.3)
    pos2 = Text("A line can be created by indefinitely extending a line segment.").scale(0.3)
    pos3 = Text("Given any straight line segment, a circle can be drawn having the segment as radius and one endpoint as center.").scale(0.3)
    pos4 = Text("All right angles are congruent.").scale(0.3)
    self.play(Write(Text("Euclid's Postulates").next_to(pos1, 5*UP)))
    self.play(Write(pos1))
    self.wait(13.5)
    self.play(ReplacementTransform(pos1, pos2))
    self.wait(4)
    self.play(ReplacementTransform(pos2, pos3))
    self.wait(4)
    self.play(ReplacementTransform(pos3, pos4))
    self.wait(7)

class pythag(Scene):
  def construct(self):
    #Introduction and some text
    image = ImageMobject("pic_pythag")
    self.play(Write(Text("Pythagoras").next_to(image, UP)))
    self.play(FadeIn(image))
    self.wait(16)
    self.play(FadeOut(image))
    self.clear()
    #attempt for general case
    # point listed in clockwise order up
    p1 = [-4,-3.5,0]
    p2 = [-4,0.5,0]
    p3 = [-4,3.5,0]
    p4 = [0,3.5,0]
    p5 = [3,3.5,0]
    p6 = [3,-0.5,0]
    p7 = [3,-3.5,0]
    p8 = [-1,-3.5,0]
    line1 = Line(p1, p2).set_color(RED)
    line2 = Line(p1, p8).set_color(BLUE)
    line3 = Line(p2, p8).set_color(GREEN)
    line4 = Line(p2, p3).set_color(BLUE)
    line5 = Line(p3, p4).set_color(RED)
    line6 = Line(p2, p4).set_color(GREEN)
    line7 = Line(p4, p5).set_color(BLUE)
    line8 = Line(p5, p6).set_color(RED)
    line9 = Line(p4, p6).set_color(GREEN)
    line10 = Line(p6, p7).set_color(BLUE)
    line11 = Line(p7, p8).set_color(RED)
    line12 = Line(p6, p8).set_color(GREEN)
    b1 = Brace(line1, direction=line1.copy().rotate(PI/2).get_unit_vector())
    b1text = b1.get_text("a")
    #b2 = Brace(line2, direction=line2.copy().rotate(3*3*3*PI/2).get_unit_vector())
    #b2text = b2.get_text("b")
    b3 = Brace(line3, direction=line3.copy().rotate(PI/2).get_unit_vector())
    b3text = b3.get_text("c")
    b4 = Brace(line4, direction=line4.copy().rotate(PI/2).get_unit_vector())
    b4text = b4.get_text("b")
    #b5 = Brace(line5, direction=line5.copy().rotate(PI/2).get_unit_vector())
    #b5text = b5.get_text("a")
    #b6 = Brace(line6, direction=line6.copy().rotate(PI/2).get_unit_vector())
    #b6text = b6.get_text("c")
    #b7 = Brace(line7, direction=line7.copy().rotate(PI/2).get_unit_vector())
    #b7text = b7.get_text("b")
    #b8 = Brace(line8, direction=line8.copy().rotate(PI/2).get_unit_vector())
    #b8text = b8.get_text("a")
    #b9 = Brace(line9, direction=line9.copy().rotate(PI/2).get_unit_vector())
    #b9text = b9.get_text("c")
    #b10 = Brace(line10, direction=line10.copy().rotate(PI/2).get_unit_vector())
    #b10text = b10.get_text("b")
    #b11 = Brace(line11, direction=line11.copy().rotate(PI/2).get_unit_vector())
    #b11text = b11.get_text("a")
    #b12 = Brace(line12, direction=line12.copy().rotate(PI/2).get_unit_vector())
    #b12text = b12.get_text("c")
    self.add(line1, line2, line3, line4, line5, line6, line7, line8, line9, line10, line11, line12, b1, b4, b3, b1text, b4text, b3text)
    self.wait(4)
    self.clear()
    self.play(Write(Text("[Big Square]=4[Triangle]+[Small Square]")))
    self.wait(7)
    self.clear()
    text1 = MathTex("(a+b)^2=2ab+c^2")
    text2 = MathTex("a^2+b^2=c^2")
    self.play(Write(text1))
    self.play(ReplacementTransform(text1, text2))
    self.wait(12)
    self.clear()
    #3-4-5 Triangle
    p1=[-4/3,-1,0]
    p2=[-4/3,2,0]
    p3=[8/3,-1,0]
    p4=[0,2,0]
    line1 = Line(p1, p2)
    line2 = Line(p1, p3)
    line3 = Line(p2, p3).set_color(ORANGE)
    b1 = Brace(line1, direction=line1.copy().rotate(PI/2).get_unit_vector())
    b1text = b1.get_text("3")
    b2 = Brace(line2)
    b2text=b2.get_tex("4")
    b3 = Brace(line3, direction=line3.copy().rotate(PI/2).get_unit_vector())
    b3text = b3.get_tex("\\sqrt{3^2+4^2}")
    b3alttext = b3.get_tex("5")
    rightangle = RightAngle(line1, line2)
    self.add(line1, line2, line3, b1, b2, b3, b1text, b2text, b3text, rightangle)
    self.play(Write(Text("Pythagorean Theorem").next_to(p4, 3*UP)))
    self.play(Transform(b3text, b3alttext))
    self.wait(5)
    self.clear()
    p1=[-7/3,-4/3,0]
    p2=[-7/3,8/3,0]
    p3=[5/3,-4/3,0]
    p4=[-1, 8/3 ,0]
    line1 = Line(p1, p2)
    line2 = Line(p1, p3)
    line3 = Line(p2, p3).set_color(ORANGE)
    b1 = Brace(line1, direction=line1.copy().rotate(PI/2).get_unit_vector())
    b1text = b1.get_text("1")
    b2 = Brace(line2)
    b2text=b2.get_tex("1")
    b3 = Brace(line3, direction=line3.copy().rotate(PI/2).get_unit_vector())
    b3text = b3.get_tex("\\sqrt{1^2+1^2}")
    b3alttext = b3.get_tex("\\sqrt{2}")
    rightangle = RightAngle(line1, line2)
    self.add(line1, line2, line3, b1, b2, b3, b1text, b2text, b3text, rightangle)
    self.play(Write(Text("Construction of irrational numbers").next_to(p4, 3*UP)))
    self.play(Transform(b3text, b3alttext))
    self.wait(5)
    self.clear()

class Thales(Scene):
  def construct(self):
    image=ImageMobject("pic_thales")
    self.play(Write(Text("Thales of Miletus").next_to(image, UP)))
    self.play(FadeIn(image))
    self.wait(1)
    self.play(FadeOut(image))
    self.clear()
    circle=Circle(radius=3)
    circle.move_to([0,0,0])
    d1=Dot([np.sqrt(9-2.99**2),2.99,0])
    d2=Dot([3,0,0])
    d3=Dot([-3,0,0])
    d4=Dot([0,3,0])
    line1=Line(d1.get_center(),d3.get_center())
    line2=Line(d3.get_center(),d2.get_center())
    line3=Line(d1.get_center(),d2.get_center())
    line1.add_updater(lambda z: z.become(Line(d1.get_center(), d3.get_center())))
    line3.add_updater(lambda z: z.become(Line(d1.get_center(), d2.get_center())))
    rightangle=RightAngle(line1, line3)
    arc = Arc(3, 0.000001, 3.141)
    arcback = Arc(3, 3.141, 0.00001)
    rightangle.add_updater(lambda z: z.become(RightAngle(line1, line3)))
    self.add(circle, line1, line2, line3, rightangle)
    self.play(Write(Text("Thales Theorem").next_to(circle, UP)))
    self.play(MoveAlongPath(d1, arc))
    self.play(MoveAlongPath(d1, arcback))
    self.play(MoveAlongPath(d1, arc))
    self.play(Transform(d1, d4))
    self.wait(25)
    self.clear()
class Archimedes(Scene):
    def construct(self):
        image=ImageMobject("pic_arch")
        self.play(FadeIn(image))
        self.play(Write(Text("Archimedes - The Founder of Calculus").next_to(image, UP)))
        self.wait(5)
        self.clear()
        text=MathTex(
            "\\frac{d}{dx}f(x)g(x)=","f(x)\\frac{d}{dx}g(x)","+",
            "g(x)\\frac{d}{dx}f(x)"
        )
        self.play(Write(text))
        framebox1 = SurroundingRectangle(text[1], buff = .1)
        framebox2 = SurroundingRectangle(text[3], buff = .1)
        self.play(
            Create(framebox1),
        )
        self.wait()
        self.play(
            ReplacementTransform(framebox1,framebox2),
        )
        self.wait(10)
        self.clear()
        image=ImageMobject("pic_build")
        self.play(FadeIn(image))
        self.wait(45)
        self.clear()
        self.wait(18)
